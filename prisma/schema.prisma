generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tablas Generales
model Empresa {
  id               String   @id @default(uuid())
  user_id          String
  ruc              String   @unique
  razon_social     String
  nombre_comercial String?
  direccion        String
  telefono         String?
  email            String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  clientes           Cliente[]
  productos          Producto[]
  facturas           Factura[]
  cuentas_contables  CuentaContable[]
  asientos_contables AsientoContable[]
  Usuario            Usuario[]
  Almacen            Almacen[]

  @@index([user_id])
  @@map("gen_empresa")
}

model Usuario {
  id         String  @id @default(uuid())
  empresa_id String
  empresa    Empresa @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  nombre     String
  email      String  @unique
  password   String
  rol        Rol
  activo     Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([empresa_id])
  @@map("gen_usuario")
}

enum Rol {
  ADMIN
  CONTADOR
  VENTAS
  INVENTARIO
}

// Clientes y CXC
model Cliente {
  id                  String  @id @default(uuid())
  empresa_id          String
  empresa             Empresa @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  tipo_identificacion String
  identificacion      String
  razon_social        String
  nombre_comercial    String?
  direccion           String?
  telefono            String?
  email               String?

  facturas Factura[]

  @@unique([empresa_id, identificacion])
  @@index([empresa_id])
  @@map("cxc_cliente")
}

// Productos e Inventario
model Producto {
  id          String  @id @default(uuid())
  empresa_id  String
  empresa     Empresa @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  codigo      String
  nombre      String
  descripcion String?
  precio      Float
  stock       Float   @default(0)
  iva         Boolean @default(true)
  ice         Boolean @default(false)

  factura_detalle FacturaDetalle[]
  Inventario      Inventario[]

  @@unique([empresa_id, codigo])
  @@index([empresa_id])
  @@map("inv_producto")
}

model Almacen {
  id         String  @id @default(uuid())
  empresa_id String
  empresa    Empresa @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  nombre     String
  direccion  String?

  productos Inventario[]

  @@map("inv_almacen")
}

model Inventario {
  id          String   @id @default(uuid())
  producto_id String
  producto    Producto @relation(fields: [producto_id], references: [id])
  almacen_id  String
  almacen     Almacen  @relation(fields: [almacen_id], references: [id])
  cantidad    Float    @default(0)

  @@index([producto_id])
  @@index([almacen_id])
  @@map("inv_inventario")
}

// Facturaci√≥n y Ventas
model Factura {
  id                     String        @id @default(uuid())
  empresa_id             String
  empresa                Empresa       @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  cliente_id             String
  cliente                Cliente       @relation(fields: [cliente_id], references: [id])
  numero_factura         String
  clave_acceso           String?       @unique
  fecha_emision          DateTime      @default(now())
  subtotal               Float
  descuento              Float         @default(0)
  subtotal_sin_impuestos Float
  iva                    Float
  ice                    Float         @default(0)
  total                  Float
  estado                 EstadoFactura @default(BORRADOR)
  observaciones          String?

  detalles         FacturaDetalle[]
  asiento_contable AsientoContable?

  @@unique([empresa_id, numero_factura])
  @@index([empresa_id])
  @@index([cliente_id])
  @@index([fecha_emision])
  @@map("ven_factura")
}

model FacturaDetalle {
  id              String   @id @default(uuid())
  factura_id      String
  factura         Factura  @relation(fields: [factura_id], references: [id], onDelete: Cascade)
  producto_id     String
  producto        Producto @relation(fields: [producto_id], references: [id])
  cantidad        Float
  precio_unitario Float
  descuento       Float    @default(0)
  subtotal        Float
  iva             Float
  ice             Float    @default(0)
  total           Float

  @@index([factura_id])
  @@index([producto_id])
  @@map("ven_factura_detalle")
}

// Contabilidad y Plan de Cuentas
model CuentaContable {
  id                String           @id @default(uuid())
  empresa_id        String
  empresa           Empresa          @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  codigo            String
  nombre            String
  tipo_cuenta       TipoCuenta
  nivel             Int
  cuenta_padre_id   String?
  cuenta_padre      CuentaContable?  @relation("CuentasHijas", fields: [cuenta_padre_id], references: [id])
  cuentas_hijas     CuentaContable[] @relation("CuentasHijas")
  acepta_movimiento Boolean          @default(true)
  activa            Boolean          @default(true)

  detalles_asiento DetalleAsiento[]

  @@unique([empresa_id, codigo])
  @@index([empresa_id])
  @@index([tipo_cuenta])
  @@map("con_cuenta")
}

model AsientoContable {
  id           String        @id @default(uuid())
  empresa_id   String
  empresa      Empresa       @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  numero       String
  fecha        DateTime      @default(now())
  descripcion  String
  tipo_asiento TipoAsiento   @default(MANUAL)
  factura_id   String?       @unique
  factura      Factura?      @relation(fields: [factura_id], references: [id])
  estado       EstadoAsiento @default(BORRADOR)

  detalles DetalleAsiento[]

  @@unique([empresa_id, numero])
  @@index([empresa_id])
  @@index([fecha])
  @@map("con_asiento")
}

model DetalleAsiento {
  id          String          @id @default(uuid())
  asiento_id  String
  asiento     AsientoContable @relation(fields: [asiento_id], references: [id], onDelete: Cascade)
  cuenta_id   String
  cuenta      CuentaContable  @relation(fields: [cuenta_id], references: [id])
  descripcion String?
  debe        Float           @default(0)
  haber       Float           @default(0)

  @@index([asiento_id])
  @@index([cuenta_id])
  @@map("con_asiento_detalle")
}

enum TipoCuenta {
  ACTIVO
  PASIVO
  PATRIMONIO
  INGRESO
  GASTO
}

enum TipoAsiento {
  MANUAL
  AUTOMATICO
}

enum EstadoAsiento {
  BORRADOR
  CONTABILIZADO
  ANULADO
}

enum EstadoFactura {
  BORRADOR
  EMITIDA
  AUTORIZADA
  ANULADA
}
